import pygame
import random
import sys

window_x = 640
window_y = 480

FPS = 30
boxSize = 40
gapSize = 10
boardWidth = 10
boardHeight = 7

xMargin = int((window_x - (boardWidth * (boxSize + gapSize))) / 2)
yMargin = int((window_y - (boardHeight * (boxSize + gapSize))) / 2)

assert (boardHeight * boardWidth) % 2 == 0

gray = (100, 100, 100)
navyblue = (50, 50, 100)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
yellow = (255, 255, 0)
orange = (255, 128, 0)
purple = (255, 0, 255)
cyan = (0, 255, 255)

Donut = 'donut'
Square = 'square'
Diamond = 'diamond'
Lines = 'lines'
Oval = 'oval'

pygame.font.init()
font = pygame.font.Font(None, 60)

bgColor = navyblue
lightbgColor = gray
boxColor = white
highlightColor = cyan

allColor = (red, green, blue, yellow, orange, purple, cyan)
allShape = (Donut, Square, Diamond, Lines, Oval)

def generateRevealedBoxesData(val):
    return [[val for _ in range(boardWidth)] for _ in range(boardHeight)]

def getRandomizeBoard():
    icons = []
    for color in allColor:
        for shape in allShape:
            icons.append((shape, color))

    random.shuffle(icons)
    numIconShape = int(boardWidth * boardHeight / 2)
    icons = icons[:numIconShape] * 2
    random.shuffle(icons)

    board = []
    for y in range(boardHeight):
        row = []
        for x in range(boardWidth):
            row.append(icons[0])
            del icons[0]
        board.append(row)
    return board

def _leftTopCoordsOfBox(box_x, box_y):
    left = box_x * (boxSize + gapSize) + xMargin
    top = box_y * (boxSize + gapSize) + yMargin
    return (left, top)

def getBoxAtPixel(x, y):
    for box_x in range(boardWidth):
        for box_y in range(boardHeight):
            left, top = _leftTopCoordsOfBox(box_x, box_y)
            boxRect = pygame.Rect(left, top, boxSize, boxSize)
            if boxRect.collidepoint(x, y):
                return (box_x, box_y)
    return (None, None)

def getColorAndShape(board, box_x, box_y):
    return board[box_y][box_x]

def _drawIcon(shape, color, box_x, box_y):
    quarter = int(boxSize * 0.25)
    half = int(boxSize * 0.5)
    left, top = _leftTopCoordsOfBox(box_x, box_y)

    if shape == Donut:
        pygame.draw.circle(window, color, (left + half, top + half), half - 5)
        pygame.draw.circle(window, bgColor, (left + half, top + half), quarter - 5)
    elif shape == Square:
        pygame.draw.rect(window, color, (left + quarter, top + quarter, boxSize - half, boxSize - half))
    elif shape == Diamond:
        pygame.draw.polygon(window, color, [(left + half, top), (left + boxSize - 1, top + half),
                                            (left + half, top + boxSize - 1), (left, top + half)])
    elif shape == Lines:
        for i in range(0, boxSize, 10):
            pygame.draw.line(window, color, (left, top + i), (left + i, top))
            pygame.draw.line(window, color, (left + i, top + boxSize), (left + boxSize, top + i))
    elif shape == Oval:
        pygame.draw.ellipse(window, color, (left, top + quarter, boxSize, half))

def drawBoard(board, revealed):
    for box_x in range(boardWidth):
        for box_y in range(boardHeight):
            left, top = _leftTopCoordsOfBox(box_x, box_y)
            if not revealed[box_y][box_x]:
                pygame.draw.rect(window, boxColor, (left, top, boxSize, boxSize))
            else:
                shape, color = getColorAndShape(board, box_x, box_y)
                _drawIcon(shape, color, box_x, box_y)

def drawHighlight(box_x, box_y):
    left, top = _leftTopCoordsOfBox(box_x, box_y)
    pygame.draw.rect(window, highlightColor, (left - 5, top - 5, boxSize + 10, boxSize + 10))

def revealBoxesAnimation(board, boxes):
    for box in boxes:
        shape, color = getColorAndShape(board, box[1], box[0])
        _drawIcon(shape, color, box[1], box[0])
    pygame.display.update()
    pygame.time.wait(500)

def coverBoxesAnimation(board, boxes):
    for box in boxes:
        left, top = _leftTopCoordsOfBox(box[1], box[0])
        pygame.draw.rect(window, boxColor, (left, top, boxSize, boxSize))
    pygame.display.update()
    pygame.time.wait(500)

def hasWon(revealedBoxes):
    for row in revealedBoxes:
        if False in row:
            return False
    return True

def gameWonAnimation(board):
    window.fill(lightbgColor)
    _print_text(font, 200, 200, "You Win!", cyan)
    pygame.display.update()
    pygame.time.wait(1500)

def _print_text(font, x, y, text, color):
    img = font.render(text, True, color)
    window.blit(img, (x, y))

def main():
    global window, FpsClock
    pygame.init()
    window = pygame.display.set_mode((window_x, window_y))
    pygame.display.set_caption("Match Puzzle")
    FpsClock = pygame.time.Clock()

    mouse_x = 0
    mouse_y = 0

    mainBoard = getRandomizeBoard()
    revealedBoxes = generateRevealedBoxesData(False)

    firstSelection = None
    window.fill(bgColor)

    while True:
        mouseClicked = False
        window.fill(bgColor)
        drawBoard(mainBoard, revealedBoxes)

        for event in pygame.event.get():
            if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEMOTION:
                mouse_x, mouse_y = event.pos
            elif event.type == pygame.MOUSEBUTTONUP:
                mouse_x, mouse_y = event.pos
                mouseClicked = True

        box_x, box_y = getBoxAtPixel(mouse_x, mouse_y)
        if box_x is not None and box_y is not None:
            if not revealedBoxes[box_y][box_x]:
                drawHighlight(box_x, box_y)
            if not revealedBoxes[box_y][box_x] and mouseClicked:
                revealBoxesAnimation(mainBoard, [(box_y, box_x)])
                revealedBoxes[box_y][box_x] = True
                if firstSelection is None:
                    firstSelection = (box_y, box_x)
                else:
                    icon1shape, icon1color = getColorAndShape(mainBoard, firstSelection[1], firstSelection[0])
                    icon2shape, icon2color = getColorAndShape(mainBoard, box_x, box_y)
                    if icon1shape != icon2shape or icon1color != icon2color:
                        pygame.time.wait(500)
                        coverBoxesAnimation(mainBoard, [firstSelection, (box_y, box_x)])
                        revealedBoxes[firstSelection[0]][firstSelection[1]] = False
                        revealedBoxes[box_y][box_x] = False
                    elif hasWon(revealedBoxes):
                        gameWonAnimation(mainBoard)
                        pygame.time.wait(500)
                        mainBoard = getRandomizeBoard()
                        revealedBoxes = generateRevealedBoxesData(False)
                    firstSelection = None

        pygame.display.update()
        FpsClock.tick(FPS)

if __name__ == '__main__':
    main()
