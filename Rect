import pygame
import sys
import random

pygame.init()

dis_width = 800
dis_height = 600

rows, cols = 8, 8
block_size = dis_width // cols
dis = pygame.display.set_mode((dis_width, dis_height))
pygame.display.set_caption("消消樂")
clock = pygame.time.Clock()

white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)

board = [[white for _ in range(rows)] for _ in range(cols)]

for row in range(rows):
    for col in range(cols):
        color = [red, blue, green]
        if col >= 2: #向左邊檢查
            if board[row][col-1] == board[row][col-2]: 
               if board[row][col-1] in color:
                   color.remove(board[row][col-1])
        if row >= 2: #向上面檢查
            if board[row-1][col] == board[row-2][col]:
                if board[row-1][col] in color:
                    color.remove(board[row-1][col])
        if color:
            board[row][col] = random.choice(color)

selected_block = None
def check_neighbors(row, col, color, visited, direction = None):
    #當太左邊(col<0)或超出右邊邊界(col>=cols)或太上面(row<0)或超出上面邊界(row>=rows)或已檢查過的格子visited[row][col](可能會造成無效檢查)或顏色非我們要的board[row][col] != color
    if row < 0 or row >= rows or col < 0  or col >= cols or visited[row][col] or board[row][col] != color:
        return
    
    visited[row][col] = True
    to_clear.append((row, col))

    if direction != "up":
        check_neighbors(row + 1, col, color, visited, direction = "down")
    if direction != "down":
        check_neighbors(row - 1, col, color, visited, direction = "up")
    if direction != "left":
        check_neighbors(row, col + 1,color, visited, direction = "right")
    if direction != "right":
        check_neighbors(row, col - 1, color, visited, direction = "left")

def chain_reaction():
    global to_clear
    changed = True
    while changed:
        changed = False
        to_clear = []
        visited = [[False for _ in range(cols)] for _ in range(rows)]
        for row in range(rows):
            for col in range(cols):
                if not visited[row][col] and board[row][col] != white:
                    temp = []
                    check_neighbors(row, col, board[row][col], visited)
                    if len(to_clear) >= 3:
                        changed = True
        if changed:
            for row, col in to_clear:
                board[row][col] = white
            drop_blocks_with_annimation()

def drop_blocks_with_annimation():
    falling = True
    while falling:
        falling = False
        for col in range(cols):
            for row in range(rows - 2, -1, -1):
                if board[row][col] != white and board[row+1][col] == white:
                    board[row+1][col] = board[row][col]
                    board[row][col] = white
                    falling = True
        dis.fill(black)
        for col in range(cols):
            for row in range(rows):
                pygame.draw.rect(dis, board[row][col], (col * block_size, row * block_size, block_size, block_size))
        for row in range(rows + 1):
            pygame.draw.line(dis, black, (0, row * block_size), (dis_width, row * block_size), 2)
        for col in range(cols + 1):
            pygame.draw.line(dis, black, (col * block_size, 0), (col * block_size, dis_height), 2)
        for col in range(cols):
            for row in range(rows):
                if board[row][col] == white:
                    board[row][col] = random.choice([green, blue, red])
        pygame.display.flip()
        clock.tick(30)
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
            #button = 1 等於按下滑鼠左鍵
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            clicked_row = mouse_y // block_size
            clicked_col = mouse_x // block_size

            if selected_block is None:
                selected_block = (clicked_row, clicked_col)
            else:
                #交換方塊位置
                board[selected_block[0]][selected_block[1]], board[clicked_row][clicked_col] = \
                    board[clicked_row][clicked_col], board[selected_block[0]][selected_block[1]]
                
                to_clear = []
                visited = [[False] * cols for _ in range(rows)]
                check_neighbors(clicked_row, clicked_col, board[clicked_row][clicked_col], visited)
                check_neighbors(clicked_row, clicked_col, board[clicked_row][clicked_col], visited, direction = "up")
                check_neighbors(clicked_row, clicked_col, board[clicked_row][clicked_col], visited, direction = "down")
                check_neighbors(clicked_row, clicked_col, board[clicked_row][clicked_col], visited, direction = "left")
                check_neighbors(clicked_row, clicked_col, board[clicked_row][clicked_col], visited, direction = "right")

                if len(to_clear) >= 3:
                    for row, col in to_clear:
                        board[row][col] = white
                    for col in range(cols):
                        non_white_blocks = [board[row][col] for row in range(rows) if board[row][col] != white]
                        non_white_blocks = [white] * (rows - len(non_white_blocks)) + non_white_blocks
                        for row in range(rows):
                            board[row][col] = non_white_blocks[row]
                        drop_blocks_with_annimation()

                else:
                  board[selected_block[0]][selected_block[1]], board[clicked_row][clicked_col] = \
                     board[clicked_row][clicked_col], board[selected_block[0]][selected_block[1]]

    dis.fill(black)

    for row in range(rows):
        for col in range(cols):
            pygame.draw.rect(dis, board[row][col], (col * block_size, row * block_size, block_size, block_size))
    for row in range(rows + 1):
        pygame.draw.line(dis,black, (0, row * block_size), (dis_width, row * block_size), 2)
    for col in range(cols + 1):
        pygame.draw.line(dis, black, (col * block_size, 0), (col * block_size, dis_height), 2)

    # 刷新屏幕
    pygame.display.flip()
    clock.tick(30)
